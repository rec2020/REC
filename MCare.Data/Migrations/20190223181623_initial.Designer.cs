// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NajmetAlraqee.Data;

namespace NajmetAlraqee.Data.Migrations
{
    [DbContext(typeof(NajmetAlraqeeContext))]
    [Migration("20190223181623_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.1-servicing-10028")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("NajmetAlraqee.Data.Entities.AppointmentStatus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ArabicName");

                    b.Property<string>("EnglishName");

                    b.HasKey("Id");

                    b.ToTable("AppointmentStatuses");
                });

            modelBuilder.Entity("NajmetAlraqee.Data.Entities.Arrival", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Country");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Arrivals");
                });

            modelBuilder.Entity("NajmetAlraqee.Data.Entities.BankDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountNumber");

                    b.Property<string>("AccountNumberInTree");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("BankDetails");
                });

            modelBuilder.Entity("NajmetAlraqee.Data.Entities.City", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ArabicName");

                    b.Property<long>("CountryId");

                    b.Property<string>("EnglishName");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("NajmetAlraqee.Data.Entities.Country", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ArabicName");

                    b.Property<string>("EnglishName");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("NajmetAlraqee.Data.Entities.Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CurrencyTypeId");

                    b.Property<string>("CurrencyTypeName");

                    b.Property<decimal>("ExchangeRate");

                    b.Property<string>("Name");

                    b.Property<string>("Symbol");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyTypeId");

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("NajmetAlraqee.Data.Entities.CurrencyType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("CurrencyTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "عملة محلية"
                        },
                        new
                        {
                            Id = 2,
                            Name = "عملة أجنبية"
                        });
                });

            modelBuilder.Entity("NajmetAlraqee.Data.Entities.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<int>("CustomerTypeId");

                    b.Property<string>("CustomerTypeName");

                    b.Property<string>("FamilyImage");

                    b.Property<string>("FirstName");

                    b.Property<string>("FirstPhone");

                    b.Property<string>("IdentityNo");

                    b.Property<string>("IdentiyImage");

                    b.Property<bool>("IsActive");

                    b.Property<string>("LastName");

                    b.Property<string>("MiddleName");

                    b.Property<string>("Name");

                    b.Property<string>("SecondPhone");

                    b.Property<int?>("UserDelegateId");

                    b.Property<string>("UserDelegateName");

                    b.HasKey("Id");

                    b.HasIndex("CustomerTypeId");

                    b.HasIndex("UserDelegateId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("NajmetAlraqee.Data.Entities.CustomerType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("CustomerTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "داخلي"
                        },
                        new
                        {
                            Id = 2,
                            Name = "خارجي"
                        });
                });

            modelBuilder.Entity("NajmetAlraqee.Data.Entities.DelegateType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("DelegateTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "مندوب داخلي "
                        },
                        new
                        {
                            Id = 2,
                            Name = "مندوب خارجي "
                        });
                });

            modelBuilder.Entity("NajmetAlraqee.Data.Entities.Doctor", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ArabicBio");

                    b.Property<string>("ArabicCVPath");

                    b.Property<string>("ArabicName");

                    b.Property<DateTime>("BirthDate");

                    b.Property<string>("EnglishBio");

                    b.Property<string>("EnglishCVPath");

                    b.Property<string>("EnglishName");

                    b.Property<DateTime>("Experience");

                    b.Property<long>("GenderId");

                    b.Property<long>("HospitalId");

                    b.Property<string>("IdentityNo");

                    b.Property<string>("ImagePath");

                    b.Property<string>("MobileNo");

                    b.Property<long>("NationalityId");

                    b.Property<int?>("NationalityId1");

                    b.Property<string>("PhoneExtension");

                    b.Property<string>("PhoneNo");

                    b.Property<decimal>("Rate");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("GenderId");

                    b.HasIndex("HospitalId");

                    b.HasIndex("NationalityId1");

                    b.HasIndex("UserId");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("NajmetAlraqee.Data.Entities.DoctorEducationLevel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("DoctorId");

                    b.Property<long>("EducationLevelId");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("EducationLevelId");

                    b.ToTable("DoctorEducationLevels");
                });

            modelBuilder.Entity("NajmetAlraqee.Data.Entities.DoctorFeedback", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Body");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<long>("DoctorId");

                    b.Property<long>("PatientId");

                    b.Property<double>("Rate");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("DoctorFeedbacks");
                });

            modelBuilder.Entity("NajmetAlraqee.Data.Entities.DoctorLanguage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("DoctorId");

                    b.Property<long>("LanguageId");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("LanguageId");

                    b.ToTable("DoctorLanguages");
                });

            modelBuilder.Entity("NajmetAlraqee.Data.Entities.DoctorSchedule", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn");

                    b.Property<DateTime>("Date");

                    b.Property<long>("DoctorId");

                    b.Property<long>("HospitalId");

                    b.Property<long>("ScheduleStatusId");

                    b.Property<string>("Time");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("HospitalId");

                    b.HasIndex("ScheduleStatusId");

                    b.ToTable("DoctorSchedules");
                });

            modelBuilder.Entity("NajmetAlraqee.Data.Entities.DoctorScheduleConfiguration", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("DoctorId");

                    b.Property<DateTime>("EndOn");

                    b.Property<string>("EveningEndingTime");

                    b.Property<string>("EveningStartingTime");

                    b.Property<long>("HospitalId");

                    b.Property<string>("MorningEndingTime");

                    b.Property<string>("MorningStartingTime");

                    b.Property<int>("PeroidInMintues");

                    b.Property<DateTime>("StartOn");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("HospitalId");

                    b.ToTable("DoctorScheduleConfigurations");
                });

            modelBuilder.Entity("NajmetAlraqee.Data.Entities.DoctorSpecialty", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("DoctorId");

                    b.Property<long>("SpecialtyId");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("SpecialtyId");

                    b.ToTable("DoctorSpecialties");
                });

            modelBuilder.Entity("NajmetAlraqee.Data.Entities.DoctorVacation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn");

                    b.Property<long>("DoctorId");

                    b.Property<DateTime>("EndingOn");

                    b.Property<long>("HospitalId");

                    b.Property<DateTime>("StartingOn");

                    b.Property<long>("VacationStatusId");

                    b.Property<long>("VacationTypeId");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("HospitalId");

                    b.HasIndex("VacationStatusId");

                    b.HasIndex("VacationTypeId");

                    b.ToTable("DoctorVacations");
                });

            modelBuilder.Entity("NajmetAlraqee.Data.Entities.EducationLevel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ArabicName");

                    b.Property<string>("EnglishName");

                    b.HasKey("Id");

                    b.ToTable("EducationLevels");
                });

            modelBuilder.Entity("NajmetAlraqee.Data.Entities.Expense", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountNumber");

                    b.Property<int?>("Code");

                    b.Property<string>("Name");

                    b.Property<string>("PartnerCode");

                    b.HasKey("Id");

                    b.ToTable("Expenses");
                });

            modelBuilder.Entity("NajmetAlraqee.Data.Entities.ForeignAgency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountNumber");

                    b.Property<string>("BankAccountNo");

                    b.Property<int?>("BankDetailId");

                    b.Property<string>("BankName");

                    b.Property<int?>("CurrencyId");

                    b.Property<string>("CurrencyName");

                    b.Property<string>("Email");

                    b.Property<bool?>("IsActive");

                    b.Property<int?>("JobTypeId");

                    b.Property<string>("JobTypeName");

                    b.Property<int?>("NationalityId");

                    b.Property<string>("NationalityName");

                    b.Property<string>("OfficeName");

                    b.Property<int?>("OfficeNumber");

                    b.Property<string>("Phone");

                    b.Property<decimal?>("Price");

                    b.Property<string>("ResponsibleUser");

                    b.HasKey("Id");

                    b.HasIndex("BankDetailId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("JobTypeId");

                    b.HasIndex("NationalityId");

                    b.ToTable("ForeignAgencies");
                });

            modelBuilder.Entity("NajmetAlraqee.Data.Entities.Gender", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ArabicName");

                    b.Property<string>("EnglishName");

                    b.HasKey("Id");

                    b.ToTable("Genders");
                });

            modelBuilder.Entity("NajmetAlraqee.Data.Entities.Hospital", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ArabicAddress");

                    b.Property<string>("ArabicDescription");

                    b.Property<string>("ArabicName");

                    b.Property<long>("CityId");

                    b.Property<long>("CountryId");

                    b.Property<string>("EnglishAddress");

                    b.Property<string>("EnglishDescription");

                    b.Property<string>("EnglishName");

                    b.Property<long>("HospitalTypeId");

                    b.Property<string>("ImagePath");

                    b.Property<double>("Latitude");

                    b.Property<string>("LogoPath");

                    b.Property<double>("Longitude");

                    b.Property<string>("MapLocation");

                    b.Property<string>("Phone1");

                    b.Property<string>("Phone2");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("HospitalTypeId");

                    b.ToTable("Hospitals");
                });

            modelBuilder.Entity("NajmetAlraqee.Data.Entities.HospitalOffer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ArabicBody");

                    b.Property<string>("ArabicImagePath");

                    b.Property<string>("ArabicTitle");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<DateTime?>("EndOn");

                    b.Property<string>("EnglishBody");

                    b.Property<string>("EnglishImagePath");

                    b.Property<string>("EnglishTitle");

                    b.Property<DateTime?>("HappendOn");

                    b.Property<long>("HospitalId");

                    b.HasKey("Id");

                    b.HasIndex("HospitalId");

                    b.ToTable("HospitalOffers");
                });

            modelBuilder.Entity("NajmetAlraqee.Data.Entities.HospitalType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ArabicName");

                    b.Property<string>("EnglishName");

                    b.HasKey("Id");

                    b.ToTable("HospitalTypes");
                });

            modelBuilder.Entity("NajmetAlraqee.Data.Entities.JobType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("JobTypes");
                });

            modelBuilder.Entity("NajmetAlraqee.Data.Entities.Language", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ArabicName");

                    b.Property<string>("EnglishName");

                    b.HasKey("Id");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("NajmetAlraqee.Data.Entities.Nationality", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Nationalities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "السعودية"
                        },
                        new
                        {
                            Id = 2,
                            Name = "مصر"
                        });
                });

            modelBuilder.Entity("NajmetAlraqee.Data.Entities.Partner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("Deserved");

                    b.Property<decimal?>("Expenses");

                    b.Property<string>("Name");

                    b.Property<decimal?>("Percentage");

                    b.Property<decimal?>("Remiander");

                    b.Property<decimal?>("Transfer");

                    b.HasKey("Id");

                    b.ToTable("Partners");
                });

            modelBuilder.Entity("NajmetAlraqee.Data.Entities.Patient", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ArabicName");

                    b.Property<string>("BirthDate");

                    b.Property<string>("EnglishName");

                    b.Property<long>("GenderId");

                    b.Property<long>("NationalityId");

                    b.Property<int?>("NationalityId1");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("GenderId");

                    b.HasIndex("NationalityId1");

                    b.HasIndex("UserId");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("NajmetAlraqee.Data.Entities.PatientAppointment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AppointementStatusId");

                    b.Property<string>("AppointmentOn");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<long>("DoctorScheduleId");

                    b.Property<string>("Email");

                    b.Property<string>("FullName");

                    b.Property<long>("GenderId");

                    b.Property<string>("Mobile");

                    b.Property<string>("Notes");

                    b.Property<long>("PatientId");

                    b.HasKey("Id");

                    b.HasIndex("AppointementStatusId");

                    b.HasIndex("DoctorScheduleId");

                    b.HasIndex("GenderId");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientAppointments");
                });

            modelBuilder.Entity("NajmetAlraqee.Data.Entities.PaymentMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<string>("TreeAccountNo");

                    b.HasKey("Id");

                    b.ToTable("PaymentMethods");
                });

            modelBuilder.Entity("NajmetAlraqee.Data.Entities.ScheduleStatus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ArabicName");

                    b.Property<string>("EnglishName");

                    b.HasKey("Id");

                    b.ToTable("ScheduleStatuses");
                });

            modelBuilder.Entity("NajmetAlraqee.Data.Entities.Specialty", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ArabicName");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("EnglishName");

                    b.Property<string>("ImagePath");

                    b.HasKey("Id");

                    b.ToTable("Specialties");
                });

            modelBuilder.Entity("NajmetAlraqee.Data.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("Mobile");

                    b.Property<bool>("MobileIsVerified");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("OTP");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("NajmetAlraqee.Data.Entities.UserDelegate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountNoTree");

                    b.Property<decimal>("CommissionPrecentage");

                    b.Property<decimal>("CommissionValue");

                    b.Property<int>("DelegateTypeId");

                    b.Property<string>("DelegateTypeName");

                    b.Property<decimal>("DeservedAmount");

                    b.Property<string>("Name");

                    b.Property<int>("NationalityId");

                    b.Property<string>("NationalityName");

                    b.Property<decimal>("RemainderAmount");

                    b.Property<decimal>("TransferAmount");

                    b.HasKey("Id");

                    b.HasIndex("DelegateTypeId");

                    b.HasIndex("NationalityId");

                    b.ToTable("UserDelegates");
                });

            modelBuilder.Entity("NajmetAlraqee.Data.Entities.VacationStatus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ArabicName");

                    b.Property<string>("EnglishName");

                    b.HasKey("Id");

                    b.ToTable("VacationStatuses");
                });

            modelBuilder.Entity("NajmetAlraqee.Data.Entities.VacationType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ArabicName");

                    b.Property<string>("EnglishName");

                    b.HasKey("Id");

                    b.ToTable("VacationTypes");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("NajmetAlraqee.Data.Entities.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("NajmetAlraqee.Data.Entities.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("NajmetAlraqee.Data.Entities.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("NajmetAlraqee.Data.Entities.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("NajmetAlraqee.Data.Entities.City", b =>
                {
                    b.HasOne("NajmetAlraqee.Data.Entities.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("NajmetAlraqee.Data.Entities.Currency", b =>
                {
                    b.HasOne("NajmetAlraqee.Data.Entities.CurrencyType", "CurrencyType")
                        .WithMany()
                        .HasForeignKey("CurrencyTypeId");
                });

            modelBuilder.Entity("NajmetAlraqee.Data.Entities.Customer", b =>
                {
                    b.HasOne("NajmetAlraqee.Data.Entities.CustomerType", "CustomerType")
                        .WithMany()
                        .HasForeignKey("CustomerTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("NajmetAlraqee.Data.Entities.UserDelegate", "UserDelegate")
                        .WithMany()
                        .HasForeignKey("UserDelegateId");
                });

            modelBuilder.Entity("NajmetAlraqee.Data.Entities.Doctor", b =>
                {
                    b.HasOne("NajmetAlraqee.Data.Entities.Gender", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("NajmetAlraqee.Data.Entities.Hospital", "Hospital")
                        .WithMany()
                        .HasForeignKey("HospitalId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("NajmetAlraqee.Data.Entities.Nationality", "Nationality")
                        .WithMany()
                        .HasForeignKey("NationalityId1");

                    b.HasOne("NajmetAlraqee.Data.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("NajmetAlraqee.Data.Entities.DoctorEducationLevel", b =>
                {
                    b.HasOne("NajmetAlraqee.Data.Entities.Doctor")
                        .WithMany("DoctorEducationLevels")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("NajmetAlraqee.Data.Entities.EducationLevel", "EducationLevel")
                        .WithMany()
                        .HasForeignKey("EducationLevelId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("NajmetAlraqee.Data.Entities.DoctorFeedback", b =>
                {
                    b.HasOne("NajmetAlraqee.Data.Entities.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("NajmetAlraqee.Data.Entities.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("NajmetAlraqee.Data.Entities.DoctorLanguage", b =>
                {
                    b.HasOne("NajmetAlraqee.Data.Entities.Doctor")
                        .WithMany("DoctorLanguages")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("NajmetAlraqee.Data.Entities.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("NajmetAlraqee.Data.Entities.DoctorSchedule", b =>
                {
                    b.HasOne("NajmetAlraqee.Data.Entities.Doctor", "Doctor")
                        .WithMany("DoctorSchedules")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("NajmetAlraqee.Data.Entities.Hospital", "Hospital")
                        .WithMany()
                        .HasForeignKey("HospitalId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("NajmetAlraqee.Data.Entities.ScheduleStatus", "ScheduleStatus")
                        .WithMany()
                        .HasForeignKey("ScheduleStatusId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("NajmetAlraqee.Data.Entities.DoctorScheduleConfiguration", b =>
                {
                    b.HasOne("NajmetAlraqee.Data.Entities.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("NajmetAlraqee.Data.Entities.Hospital", "Hospital")
                        .WithMany()
                        .HasForeignKey("HospitalId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("NajmetAlraqee.Data.Entities.DoctorSpecialty", b =>
                {
                    b.HasOne("NajmetAlraqee.Data.Entities.Doctor")
                        .WithMany("DoctorSpecialtys")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("NajmetAlraqee.Data.Entities.Specialty", "Specialty")
                        .WithMany()
                        .HasForeignKey("SpecialtyId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("NajmetAlraqee.Data.Entities.DoctorVacation", b =>
                {
                    b.HasOne("NajmetAlraqee.Data.Entities.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("NajmetAlraqee.Data.Entities.Hospital", "Hospital")
                        .WithMany()
                        .HasForeignKey("HospitalId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("NajmetAlraqee.Data.Entities.VacationStatus", "VacationStatus")
                        .WithMany()
                        .HasForeignKey("VacationStatusId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("NajmetAlraqee.Data.Entities.VacationType", "VacationType")
                        .WithMany()
                        .HasForeignKey("VacationTypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("NajmetAlraqee.Data.Entities.ForeignAgency", b =>
                {
                    b.HasOne("NajmetAlraqee.Data.Entities.BankDetail", "BankDetail")
                        .WithMany()
                        .HasForeignKey("BankDetailId");

                    b.HasOne("NajmetAlraqee.Data.Entities.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId");

                    b.HasOne("NajmetAlraqee.Data.Entities.JobType", "JobType")
                        .WithMany()
                        .HasForeignKey("JobTypeId");

                    b.HasOne("NajmetAlraqee.Data.Entities.Nationality", "Nationality")
                        .WithMany()
                        .HasForeignKey("NationalityId");
                });

            modelBuilder.Entity("NajmetAlraqee.Data.Entities.Hospital", b =>
                {
                    b.HasOne("NajmetAlraqee.Data.Entities.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("NajmetAlraqee.Data.Entities.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("NajmetAlraqee.Data.Entities.HospitalType", "HospitalType")
                        .WithMany()
                        .HasForeignKey("HospitalTypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("NajmetAlraqee.Data.Entities.HospitalOffer", b =>
                {
                    b.HasOne("NajmetAlraqee.Data.Entities.Hospital", "Hospital")
                        .WithMany()
                        .HasForeignKey("HospitalId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("NajmetAlraqee.Data.Entities.Patient", b =>
                {
                    b.HasOne("NajmetAlraqee.Data.Entities.Gender", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("NajmetAlraqee.Data.Entities.Nationality", "Nationality")
                        .WithMany()
                        .HasForeignKey("NationalityId1");

                    b.HasOne("NajmetAlraqee.Data.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("NajmetAlraqee.Data.Entities.PatientAppointment", b =>
                {
                    b.HasOne("NajmetAlraqee.Data.Entities.AppointmentStatus", "AppointementStatus")
                        .WithMany()
                        .HasForeignKey("AppointementStatusId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("NajmetAlraqee.Data.Entities.DoctorSchedule", "DoctorSchedule")
                        .WithMany()
                        .HasForeignKey("DoctorScheduleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("NajmetAlraqee.Data.Entities.Gender", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("NajmetAlraqee.Data.Entities.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("NajmetAlraqee.Data.Entities.UserDelegate", b =>
                {
                    b.HasOne("NajmetAlraqee.Data.Entities.DelegateType", "DelegateType")
                        .WithMany()
                        .HasForeignKey("DelegateTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("NajmetAlraqee.Data.Entities.Nationality", "Nationality")
                        .WithMany()
                        .HasForeignKey("NationalityId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
